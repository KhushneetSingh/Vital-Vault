# 🏥 VitalVault - AI-Powered Health Companion

**Tagline:** *"Your Health Records, Secured & Analyzed with AI Intelligence"*

---

## 📋 Executive Summary

**Project Name:** VitalVault  
**Duration:** 4 Weeks (28 Days)  
**Team Size:** 3-4 Developers  
**Platform:** Flutter (iOS & Android)  
**Deployment:** App Store & Google Play Store  
**Key Innovation:** Integrated AI Chat Assistant powered by Qwen

---

## 🎯 Complete Feature Set (4-Week Build)

### 🔑 Core Features
1. ✅ Google Sign-In Authentication
2. ✅ Family Profile Management (Multi-user)
3. ✅ Health Document Upload & AI Analysis
4. ✅ **AI Chat Assistant (Qwen Integration)**
5. ✅ Medicine Tracker with Smart Reminders
6. ✅ Wearable Integration (Google Fit/Apple Health)
7. ✅ Health Dashboard with Metrics
8. ✅ Emergency SOS with Location Sharing
9. ✅ Nearby Healthcare Facilities Finder
10. ✅ Health News & Information Hub
11. ✅ Vaccination Reminders
12. ✅ Health Timeline & History

### 🆕 AI Chat Features
- 💬 Natural health conversations
- 📊 Query health records through chat
- 💊 Medicine information & interactions
- 🔍 Symptom checker (with disclaimers)
- 📈 Personalized health insights
- 🗂️ Document Q&A (ask about your reports)
- 🎯 Health goal tracking through conversation

---

## 🏗️ Enhanced System Architecture

```
┌────────────────────────────────────────────────────────────────┐
│                    FLUTTER MOBILE APP                           │
│                                                                 │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────────┐      │
│  │   Auth   │  │Dashboard │  │  Profile │  │ AI Chat  │ ⭐   │
│  │  Screen  │  │  Screen  │  │  Manager │  │  Screen  │      │
│  └──────────┘  └──────────┘  └──────────┘  └──────────┘      │
│                                                                 │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────────┐      │
│  │ Medicine │  │ Records  │  │ Wearable │  │ Emergency│      │
│  │ Tracker  │  │  Vault   │  │  Sync    │  │   SOS    │      │
│  └──────────┘  └──────────┘  └──────────┘  └──────────┘      │
│                                                                 │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐                    │
│  │  Nearby  │  │  Health  │  │Vaccination│                    │
│  │Healthcare│  │   News   │  │ Tracker  │                    │
│  └──────────┘  └──────────┘  └──────────┘                    │
│                                                                 │
├─────────────────────────────────────────────────────────────────┤
│                    STATE MANAGEMENT                             │
│                   Riverpod Provider                             │
├─────────────────────────────────────────────────────────────────┤
│                    LOCAL STORAGE                                │
│  ┌──────────────────────────────────────────────────────────┐  │
│  │  Hive DB                                                  │  │
│  │  • AI Analysis Cache                                     │  │
│  │  • Chat History (Encrypted)                       ⭐     │  │
│  │  • Offline Queue                                         │  │
│  │  • User Preferences                                      │  │
│  └──────────────────────────────────────────────────────────┘  │
├─────────────────────────────────────────────────────────────────┤
│                    AI/ML SERVICES                               │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────────┐      │
│  │ ML Kit   │  │ Qwen AI  │  │Conversational│ TF Lite │      │
│  │   OCR    │  │ Analysis │  │  AI Chat  │⭐│ Models  │      │
│  └──────────┘  └──────────┘  └──────────┘  └──────────┘      │
└─────────────────────────────────────────────────────────────────┘
                           │
                           ▼
┌─────────────────────────────────────────────────────────────────┐
│                    FIREBASE BACKEND                             │
│                                                                 │
│  ┌──────────┐  ┌──────────┐  ┌──────────┐  ┌──────────┐      │
│  │Firestore │  │ Storage  │  │   Auth   │  │   FCM    │      │
│  │ Database │  │Files/PDF │  │ (Google) │  │  Notify  │      │
│  └──────────┘  └──────────┘  └──────────┘  └──────────┘      │
└─────────────────────────────────────────────────────────────────┘
                           │
                           ▼
┌─────────────────────────────────────────────────────────────────┐
│                    EXTERNAL APIS                                │
│                                                                 │
│  • OpenRouter (Qwen AI - FREE)                          ⭐     │
│  • Google Maps Platform (Places, Geocoding)                    │
│  • Google Fit API / Apple HealthKit                            │
│  • NewsAPI / Health RSS Feeds                                  │
│  • SMS Gateway (Native)                                        │
└─────────────────────────────────────────────────────────────────┘
```

---

## 🛠️ Complete Technology Stack

### Frontend (Mobile App)
| Component | Technology | Version | Purpose |
|-----------|-----------|---------|---------|
| Framework | Flutter | 3.24+ | Cross-platform |
| Language | Dart | 3.5+ | Programming |
| State Management | Riverpod | 2.5+ | State handling |
| UI Design | Material Design 3 | Built-in | Modern UI |
| Navigation | Go Router | 14.0+ | Routing |
| Charts | FL Chart | 0.69+ | Data visualization |

### Backend & Cloud Services
| Service | Provider | Purpose |
|---------|----------|---------|
| Authentication | Firebase Auth | Google Sign-In |
| Database | Cloud Firestore | NoSQL Database |
| File Storage | Firebase Storage | Document Storage |
| Push Notifications | FCM | Reminders |
| AI Chat & Analysis | OpenRouter (Qwen3) | AI Features ⭐ |
| OCR | Google ML Kit | Text Extraction |
| Maps | Google Maps API | Location Services |
| Wearables | Google Fit/HealthKit | Health Data |
| News Feed | NewsAPI | Health Articles |

### Complete Dependencies (pubspec.yaml)
```yaml
dependencies:
  flutter:
    sdk: flutter
  
  # State Management
  flutter_riverpod: ^2.5.1
  riverpod_annotation: ^2.3.5
  
  # Firebase Suite
  firebase_core: ^3.6.0
  firebase_auth: ^5.3.1
  cloud_firestore: ^5.4.4
  firebase_storage: ^12.3.4
  firebase_messaging: ^15.1.3
  
  # AI & ML ⭐
  google_mlkit_text_recognition: ^0.13.1
  http: ^1.2.2
  dio: ^5.7.0
  
  # Local Storage
  hive_flutter: ^1.1.0
  hive: ^2.2.3
  shared_preferences: ^2.3.2
  
  # UI Components
  image_picker: ^1.1.2
  file_picker: ^8.1.2
  cached_network_image: ^3.4.1
  flutter_svg: ^2.0.10
  lottie: ^3.1.2
  
  # Charts & Visualization
  fl_chart: ^0.69.0
  syncfusion_flutter_charts: ^27.2.5
  
  # Maps & Location
  google_maps_flutter: ^2.9.0
  geolocator: ^13.0.1
  geocoding: ^3.0.0
  
  # Health Data (Wearables)
  health: ^11.1.0
  
  # Notifications
  flutter_local_notifications: ^17.2.3
  timezone: ^0.9.4
  
  # PDF & Document Handling
  syncfusion_flutter_pdfviewer: ^27.2.5
  pdf: ^3.11.1
  printing: ^5.13.3
  
  # Utils
  intl: ^0.19.0
  url_launcher: ^6.3.1
  permission_handler: ^11.3.1
  share_plus: ^10.0.2
  path_provider: ^2.1.4
  uuid: ^4.5.1
  connectivity_plus: ^6.0.5
  
  # SMS for Emergency
  flutter_sms: ^2.3.3
  
  # Secure Storage
  flutter_secure_storage: ^9.2.2
  encrypt: ^5.0.3

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^4.0.0
  build_runner: ^2.4.13
  riverpod_generator: ^2.4.3
  hive_generator: ^2.0.1
```

---

## 🗄️ Enhanced Database Architecture

### Firestore Collections Structure

```javascript
📁 users/
  └── {userId}
      ├── email: string
      ├── displayName: string
      ├── photoURL: string
      ├── phoneNumber: string
      ├── createdAt: timestamp
      ├── lastLogin: timestamp
      ├── subscriptionTier: string (free/premium)
      └── emergencyContacts: array<map>

      📁 profiles/
        └── {profileId}
            ├── name: string
            ├── relationship: string
            ├── dateOfBirth: timestamp
            ├── gender: string
            ├── bloodGroup: string
            ├── allergies: array<string>
            ├── chronicConditions: array<string>
            ├── height: number
            ├── weight: number
            ├── bmi: number (calculated)
            ├── avatarUrl: string
            ├── isActive: boolean
            └── lastUpdated: timestamp

            📁 healthRecords/
              └── {recordId}
                  ├── title: string
                  ├── type: string
                  ├── date: timestamp
                  ├── storageUrl: string
                  ├── thumbnailUrl: string
                  ├── fileSize: number
                  ├── mimeType: string
                  ├── uploadedAt: timestamp
                  ├── tags: array<string>
                  └── metadata: map

            📁 medications/
              └── {medicineId}
                  ├── name: string
                  ├── dosage: string
                  ├── form: string
                  ├── frequency: string
                  ├── timeOfDay: array<string>
                  ├── startDate: timestamp
                  ├── endDate: timestamp
                  ├── expiryDate: timestamp
                  ├── quantity: number
                  ├── remainingQuantity: number
                  ├── reminderTimes: array<timestamp>
                  ├── instructions: string
                  ├── sideEffects: array<string>
                  ├── prescriptionRecordId: string
                  ├── isActive: boolean
                  ├── notificationIds: array<string>
                  └── adherenceLog: array<map>
                      ├── date: timestamp
                      ├── taken: boolean
                      └── time: timestamp

            📁 vitalSigns/
              └── {vitalId}
                  ├── type: string (heart_rate/spo2/bp/temp/glucose/sleep/steps)
                  ├── value: number or map
                  ├── unit: string
                  ├── timestamp: timestamp
                  ├── source: string (manual/wearable/device)
                  ├── notes: string
                  └── profileId: string

            📁 vaccinations/
              └── {vaccineId}
                  ├── name: string
                  ├── date: timestamp
                  ├── nextDueDate: timestamp
                  ├── hospital: string
                  ├── batchNumber: string
                  ├── administeredBy: string
                  └── certificateUrl: string

            📁 chatHistory/ ⭐ NEW
              └── {chatId}
                  ├── sessionId: string
                  ├── messages: array<map>
                      ├── role: string (user/assistant)
                      ├── content: string
                      ├── timestamp: timestamp
                      └── metadata: map
                  ├── context: map (health records mentioned)
                  ├── startedAt: timestamp
                  └── lastMessageAt: timestamp

📁 healthNews/
  └── {newsId}
      ├── title: string
      ├── content: string
      ├── summary: string
      ├── source: string
      ├── category: string
      ├── imageUrl: string
      ├── publishedAt: timestamp
      ├── url: string
      └── tags: array<string>

📁 hospitalDirectory/
  └── {hospitalId}
      ├── name: string
      ├── type: string (hospital/clinic/pharmacy)
      ├── address: map
      ├── location: geopoint
      ├── phone: string
      ├── rating: number
      ├── services: array<string>
      └── isVerified: boolean
```

### Hive Local Storage (Enhanced)

```dart
// Box 1: AI Analysis Cache
@HiveType(typeId: 0)
class AIAnalysisCache {
  @HiveField(0)
  String recordId;
  
  @HiveField(1)
  DateTime timestamp;
  
  @HiveField(2)
  Map<String, dynamic> analysis;
  
  @HiveField(3)
  String rawText;
  
  @HiveField(4)
  bool isSynced;
}

// Box 2: Chat History (Encrypted) ⭐ NEW
@HiveType(typeId: 1)
class ChatMessage {
  @HiveField(0)
  String id;
  
  @HiveField(1)
  String role; // user, assistant, system
  
  @HiveField(2)
  String content;
  
  @HiveField(3)
  DateTime timestamp;
  
  @HiveField(4)
  Map<String, dynamic>? metadata;
  
  @HiveField(5)
  List<String>? attachedRecordIds;
}

@HiveType(typeId: 2)
class ChatSession {
  @HiveField(0)
  String sessionId;
  
  @HiveField(1)
  String profileId;
  
  @HiveField(2)
  List<ChatMessage> messages;
  
  @HiveField(3)
  DateTime createdAt;
  
  @HiveField(4)
  DateTime lastMessageAt;
  
  @HiveField(5)
  String title; // Auto-generated from first message
}

// Box 3: Offline Queue
@HiveType(typeId: 3)
class OfflineAction {
  @HiveField(0)
  String id;
  
  @HiveField(1)
  String action;
  
  @HiveField(2)
  Map<String, dynamic> data;
  
  @HiveField(3)
  DateTime timestamp;
  
  @HiveField(4)
  int retryCount;
}

// Box 4: Health Metrics Cache
@HiveType(typeId: 4)
class HealthMetricsCache {
  @HiveField(0)
  String profileId;
  
  @HiveField(1)
  List<Map<String, dynamic>> weeklyData;
  
  @HiveField(2)
  DateTime lastSync;
}
```

---

## 🔄 4-Week Development Timeline

### **WEEK 1: Foundation & Core Features** (Days 1-7)

#### **Days 1-2: Project Setup** ⚙️
**Team: All Developers**

**Tasks:**
- [ ] Create Flutter project structure
- [ ] Setup Git repository with branching strategy
- [ ] Configure Firebase (iOS & Android)
- [ ] Setup environments (dev/staging/prod)
- [ ] Install all dependencies
- [ ] Create folder architecture
- [ ] Setup code generation (build_runner)
- [ ] Configure app icons & splash screens

**Deliverables:**
- ✅ Working project with Firebase configured
- ✅ README with setup instructions
- ✅ Git workflow document

---

#### **Days 3-4: Authentication & Navigation** 🔐
**Team: Developer 1**

**Tasks:**
- [ ] Implement Google Sign-In
- [ ] Create splash screen with auth check
- [ ] Build onboarding flow (4 screens)
- [ ] Setup bottom navigation bar
- [ ] Implement logout functionality
- [ ] Create AuthProvider with Riverpod
- [ ] Add biometric authentication option
- [ ] Handle token refresh

**Screens to Build:**
- `SplashScreen`
- `OnboardingScreen`
- `LoginScreen`
- `MainNavigationScreen`

**Deliverables:**
- ✅ Complete authentication flow
- ✅ Persistent login state
- ✅ Navigation structure

---

#### **Days 5-7: Profile Management & Dashboard** 👤
**Team: Developer 2**

**Tasks:**
- [ ] Create user profile model
- [ ] Build family profile manager
- [ ] Add/edit/delete profiles
- [ ] Profile switching mechanism
- [ ] Avatar upload to Firebase Storage
- [ ] Build home dashboard UI
- [ ] Quick stats cards
- [ ] Profile data persistence
- [ ] Implement ProfileProvider

**Screens to Build:**
- `DashboardScreen`
- `ProfileManagerScreen`
- `AddProfileScreen`
- `EditProfileScreen`
- `ProfileDetailScreen`

**Deliverables:**
- ✅ Complete profile management
- ✅ Working dashboard
- ✅ Data synced to Firestore

---

### **WEEK 2: AI Integration & Health Records** (Days 8-14)

#### **Days 8-10: AI Chat Assistant** 🤖⭐
**Team: Developer 1 + Developer 3**

**Tasks:**
- [ ] Setup OpenRouter API service
- [ ] Create chat UI (like WhatsApp/ChatGPT)
- [ ] Implement message streaming
- [ ] Build chat history persistence (Hive)
- [ ] Add context management (health records)
- [ ] Implement conversation memory
- [ ] Create chat sessions
- [ ] Add quick action buttons
- [ ] Voice input integration (optional)
- [ ] Add medical disclaimers in chat

**Features:**
- Real-time chat with Qwen AI
- Context-aware responses
- Health record querying
- Medicine information
- Symptom discussions
- Health tips & advice

**Screens to Build:**
- `AIChatScreen`
- `ChatHistoryScreen`
- `ChatSettingsScreen`

**Code Structure:**
```dart
// Chat Service
class QwenChatService {
  - Future<String> sendMessage(message, context)
  - Stream<String> streamResponse(message)
  - Future<void> addHealthContext(recordIds)
  - Future<List<ChatMessage>> getChatHistory()
}

// Chat Provider
class ChatProvider extends StateNotifier<ChatState> {
  - sendMessage()
  - loadHistory()
  - clearHistory()
  - addContext()
}
```

**Deliverables:**
- ✅ Functional AI chat assistant
- ✅ Chat history persistence
- ✅ Context-aware conversations

---

#### **Days 11-14: Health Records & AI Analysis** 📁
**Team: Developer 2 + Developer 4**

**Tasks:**
- [ ] Build document upload flow
- [ ] Integrate ML Kit OCR
- [ ] Implement Qwen AI document analysis
- [ ] Create record viewer (PDF/Image)
- [ ] Build timeline view
- [ ] Add search & filter functionality
- [ ] Implement tags system
- [ ] Share records functionality
- [ ] Delete with confirmation
- [ ] Thumbnail generation
- [ ] Compression before upload

**Screens to Build:**
- `HealthRecordsScreen`
- `AddRecordScreen`
- `RecordDetailScreen`
- `RecordViewerScreen`
- `AIAnalysisResultScreen`

**Analysis Flow:**
1. User captures/uploads document
2. ML Kit extracts text (on-device)
3. Send to Qwen AI for analysis
4. Parse AI response (JSON)
5. Save analysis to Hive (local)
6. Upload original to Firebase Storage
7. Save metadata to Firestore
8. Display results to user

**Deliverables:**
- ✅ Complete record management
- ✅ AI-powered document analysis
- ✅ Timeline view with filters

---

### **WEEK 3: Medicine Tracker & Wearables** (Days 15-21)

#### **Days 15-17: Medicine Tracker** 💊
**Team: Developer 1**

**Tasks:**
- [ ] Create medicine model
- [ ] Build add medicine form
- [ ] Setup local notifications
- [ ] Implement reminder scheduling
- [ ] Create medicine list view
- [ ] Add inventory tracker
- [ ] Expiry date alerts
- [ ] Mark as taken functionality
- [ ] Adherence tracking
- [ ] Refill reminders
- [ ] Medicine interactions checker
- [ ] Extract medicines from prescriptions (AI)

**Screens to Build:**
- `MedicineTrackerScreen`
- `AddMedicineScreen`
- `MedicineDetailScreen`
- `MedicineHistoryScreen`

**Notification Logic:**
```dart
class NotificationService {
  - scheduleMedicineReminder()
  - cancelReminder()
  - handleReminderAction()
  - rescheduleReminder()
}
```

**Deliverables:**
- ✅ Complete medicine management
- ✅ Working reminders system
- ✅ Adherence tracking

---

#### **Days 18-21: Wearable Integration & Health Metrics** ⌚
**Team: Developer 2 + Developer 3**

**Tasks:**
- [ ] Setup health package (Google Fit/Apple Health)
- [ ] Request health permissions
- [ ] Fetch sleep data
- [ ] Fetch heart rate & SpO2
- [ ] Fetch steps count
- [ ] Fetch blood pressure (if available)
- [ ] Create health metrics dashboard
- [ ] Build visualization charts
- [ ] Sync data to Firestore
- [ ] Show trends & insights
- [ ] Add manual entry option
- [ ] Export health data

**Screens to Build:**
- `HealthMetricsScreen`
- `WearableSyncScreen`
- `MetricDetailScreen` (for each metric)
- `HealthTrendsScreen`

**Charts to Implement:**
- Line chart for heart rate trends
- Bar chart for sleep duration
- Pie chart for activity breakdown
- Trend indicators

**Deliverables:**
- ✅ Wearable data syncing
- ✅ Health metrics visualization
- ✅ Trends and insights

---

### **WEEK 4: Additional Features & Polish** (Days 22-28)

#### **Days 22-23: Emergency Features** 🚨
**Team: Developer 4**

**Tasks:**
- [ ] Build SOS button UI
- [ ] Implement emergency contacts manager
- [ ] Get current location
- [ ] Send SMS to emergency contacts
- [ ] Include location in SMS
- [ ] Add countdown before sending
- [ ] Call emergency services
- [ ] Show nearby hospitals on emergency
- [ ] Create emergency profile card
- [ ] Quick access from anywhere

**Screens to Build:**
- `EmergencySOSScreen`
- `EmergencyContactsScreen`
- `AddEmergencyContactScreen`

**Deliverables:**
- ✅ Working SOS system
- ✅ Emergency contacts management
- ✅ Location sharing

---

#### **Days 24-25: Location Services & News Feed** 📍📰
**Team: Developer 1 + Developer 2**

**Tasks:**

**Location Services:**
- [ ] Integrate Google Maps
- [ ] Implement Places API
- [ ] Find nearby hospitals
- [ ] Find nearby pharmacies/clinics
- [ ] Show on map with markers
- [ ] Calculate distance
- [ ] Get directions
- [ ] Call facility directly
- [ ] Save favorite locations
- [ ] Filter by type/rating

**Health News:**
- [ ] Integrate NewsAPI or RSS feeds
- [ ] Fetch health articles
- [ ] Category filtering
- [ ] Search functionality
- [ ] Bookmark articles
- [ ] Share articles
- [ ] Open in browser
- [ ] Save offline reading

**Screens to Build:**
- `NearbyHealthcareScreen`
- `MapViewScreen`
- `HealthNewsScreen`
- `NewsDetailScreen`
- `BookmarkedNewsScreen`

**Deliverables:**
- ✅ Nearby healthcare finder
- ✅ Health news feed
- ✅ Bookmark & share features

---

#### **Days 26-27: Vaccination Tracker & Testing** 💉🧪
**Team: All Developers**

**Tasks:**

**Vaccination Tracker:**
- [ ] Create vaccination model
- [ ] Add vaccination form
- [ ] Upload vaccination certificate
- [ ] Set reminder for next dose
- [ ] Track vaccination history
- [ ] Export vaccination card

**Testing:**
- [ ] Write unit tests (critical functions)
- [ ] Widget tests (key screens)
- [ ] Integration tests (user flows)
- [ ] Test on multiple devices
- [ ] Test offline functionality
- [ ] Test notification system
- [ ] Fix all bugs
- [ ] Performance optimization
- [ ] Memory leak checks

**Screens to Build:**
- `VaccinationTrackerScreen`
- `AddVaccinationScreen`
- `VaccinationDetailScreen`

**Deliverables:**
- ✅ Vaccination tracking
- ✅ All major bugs fixed
- ✅ Test coverage >60%

---

#### **Day 28: Final Polish & Documentation** 📝✨
**Team: All Developers**

**Tasks:**
- [ ] UI/UX polish
- [ ] Add loading states everywhere
- [ ] Error handling review
- [ ] Add empty states
- [ ] Accessibility improvements
- [ ] Dark mode support
- [ ] Add app tour for first-time users
- [ ] Create user manual
- [ ] Write API documentation
- [ ] Complete project report
- [ ] Create demo video
- [ ] Prepare presentation slides
- [ ] App store screenshots
- [ ] Privacy policy page
- [ ] Terms of service page

**Documentation Deliverables:**
- ✅ User manual (PDF)
- ✅ Technical documentation
- ✅ API documentation
- ✅ Project report (50+ pages)
- ✅ Presentation (25 slides)
- ✅ Demo video (5-10 mins)

---

## 🎨 User Flow Diagrams

### **Main User Journey**

```
App Launch
    │
    ├─ First Time User
    │   ├─ Splash Screen
    │   ├─ Onboarding (4 screens)
    │   ├─ Medical Disclaimer (MUST ACCEPT)
    │   ├─ Privacy Policy (MUST ACCEPT)
    │   ├─ Google Sign-In
    │   ├─ Create Profile
    │   └─ Dashboard
    │
    └─ Returning User
        ├─ Splash Screen
        ├─ Auto Login
        └─ Dashboard

Dashboard (Home Screen)
    ├─ Welcome Header (Profile Pic, Name)
    ├─ Quick Stats Cards
    │   ├─ Today's Medicines (3 pending)
    │   ├─ Upcoming Vaccination
    │   ├─ Recent Health Metrics
    │   └─ Documents (15 total)
    │
    ├─ Quick Actions (Floating)
    │   ├─ Upload Document
    │   ├─ AI Chat 💬⭐
    │   ├─ Add Medicine
    │   └─ SOS Emergency
    │
    └─ Recent Activity Feed
        ├─ Medicine taken today
        ├─ Document uploaded yesterday
        └─ Health metric synced

Bottom Navigation
    ├─ 🏠 Home (Dashboard)
    ├─ 💬 AI Chat ⭐
    ├─ 📁 Records
    ├─ 💊 Medicines
    └─ 👤 Profile
```

### **AI Chat Flow** ⭐

```
AI Chat Screen
    │
    ├─ New Conversation
    │   ├─ Select Profile Context
    │   ├─ Quick Actions Buttons
    │   │   ├─ "Analyze my latest report"
    │   │   ├─ "Medicine information"
    │   │   ├─ "Health tips"
    │   │   └─ "Symptom checker"
    │   │
    │   ├─ User Types Message
    │   ├─ AI Processes with Context
    │   │   ├─ Check relevant health records
    │   │   ├─ Check medications
    │   │   └─ Check vital signs
    │   │
    │   └─ AI Response with Disclaimer
    │       ├─ Answer
    │       ├─ Related Records (if any)
    │       └─ Suggested Actions
    │
    └─ Chat History
        ├─ List all past conversations
        ├─ Search conversations
        ├─ Delete conversation
        └─ Export conversation

Chat Features:
    ├─ Voice Input (optional)
    ├─ Attach Health Record
    ├─ Copy Response
    ├─ Share Conversation
    ├─ Report Issue
    └─ Clear Context
```

### **Document Upload & Analysis Flow**

```
Upload Document
    │
    ├─ Choose Source
    │   ├─ 📷 Camera
    │   ├─ 🖼️ Gallery
    │   └─ 📄 File Picker
    │
    ├─ Select Document
    │
    ├─ Preview & Confirm
    │
    ├─ Processing...
    │   ├─ Step 1: Extracting text (ML Kit)
    │   ├─ Step 2: Analyzing with AI (Qwen)
    │   ├─ Step 3: Uploading to cloud
    │   └─ Step 4: Saving metadata
    │
    ├─ Analysis Results ⭐
    │   ├─ ⚠️ Disclaimer Banner
    │   ├─ Report Type
    │   ├─ Date
    │   ├─ Summary
    │   ├─ Key Findings
    │   ├─ Abnormal Values (if any)
    │   ├─ Medications Found
    │   ├─ Doctor Name
    │   └─ Hospital
    │
    ├─ Actions Available
    │   ├─ Add to Timeline
    │   ├─ Add Medicines to Tracker
    │   ├─ Ask AI about this report 💬
    │   ├─ Share Report
    │   └─ View Original Document
    │
    └─ Save to Health Records